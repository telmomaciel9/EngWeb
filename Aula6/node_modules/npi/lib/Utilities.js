/**
 * A set of helper utilities.
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Utilities = (function () {
  function Utilities() {
    _classCallCheck(this, Utilities);
  }

  _createClass(Utilities, null, [{
    key: 'parseInteger',

    /**
     * Parses an input given as a number or string into an integer.
     * @param {Number|String} number - input to parse.
     * @throws {Error} if the input can not be parsed into an integer.
     * @returns {Number} a integer.
     */
    value: function parseInteger(number) {

      number = Number(Number.parseInt(number));

      if (Number.isNaN(number)) throw new Error('Not a number');

      return number;
    }

    /**
     * Doubles the value of a given integer
     * @param {Number|String} integer - parsed as an integer.
     * @throws {Error} if the input can not be parsed into an integer.
     * @returns {Number} the integer multiplied by two.
     */
  }, {
    key: 'doubleInteger',
    value: function doubleInteger(integer) {

      integer = this.parseInteger(integer);

      return integer * 2;
    }

    /**
     * Sums the value of the digits in a given integer
     * @param {Number|String} integer - parsed as an integer.
     * @throws {Error} if the input can not be parsed into an integer.
     * @returns {Number} the sum of the digits in the integer.
     */
  }, {
    key: 'sumDigits',
    value: function sumDigits(integer) {

      integer = this.parseInteger(integer);

      var sum = 0;

      while (integer > 0) {

        sum += integer % 10;
        integer = Math.floor(integer / 10);
      }

      return sum;
    }
  }]);

  return Utilities;
})();

exports['default'] = Utilities;
module.exports = exports['default'];