'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _Utilities = require('./Utilities');

var _Utilities2 = _interopRequireDefault(_Utilities);

/**
 * NPI
 * National Provider Identifier (NPI)
 * Represents a National Provider Identifier (NPI)
 */

var NPI = (function () {

  /**
   * @param {String} string - a NPI string.
   */

  function NPI(string) {
    _classCallCheck(this, NPI);

    // Get the last character from the string
    var lastCharacter = string.slice(-1);

    // Parse the last character as an integer
    var checkDigit = _Utilities2['default'].parseInteger(lastCharacter);

    // Set the start and end of the NPI in the string
    var endOfNPI = string.length - 1;
    var startOfNPI = string.length - 10;

    // Get the NPI substring from the raw string
    var npi = string.substring(startOfNPI, endOfNPI);

    this.raw = string;
    this.npi = npi;
    this.checkDigit = checkDigit;
  }

  /**
   * Checks if the NPI is valid.
   */

  _createClass(NPI, [{
    key: 'toString',

    /**
     * Convert th NPI to a string.
     * @return {String} the NPI string.
     */
    value: function toString() {

      return String(this.raw);
    }
  }, {
    key: 'isValid',
    get: function get() {

      var npi = this.npi;
      var sum = 0;
      var isAlternate = true;
      var position = npi.length;

      while (position--) {

        // Get the NPI character at the current position
        var character = npi.charAt(position);

        // Parse the character as an integer
        var integer = _Utilities2['default'].parseInteger(character);

        // If in the alternate position
        if (isAlternate) {

          // Double the integer and sum its digits and then add it to the sum
          sum += _Utilities2['default'].sumDigits(_Utilities2['default'].doubleInteger(integer));
        }

        // If not in the alternate position add the integer to the sum directly
        else sum += integer;

        // Toggle alternate position
        isAlternate = !isAlternate;
      }

      // Calculate the check digit from the sum using modulus 10
      var checkDigit = sum % 10;

      return this.checkDigit === checkDigit;
    }
  }]);

  return NPI;
})();

exports['default'] = NPI;
module.exports = exports['default'];