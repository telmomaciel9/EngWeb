'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _stream = require('stream');

var _stream2 = _interopRequireDefault(_stream);

var _NPI = require('./NPI');

var _NPI2 = _interopRequireDefault(_NPI);

var Transform = _stream2['default'].Transform;

/**
 * Stream transform to validate NPIs.
 * Validates NPI strings piped through a stream.
 * @example
 *
 * import split from 'split'
 * import {NPIValidator} from 'npi'
 *
 * const validator = new NPIValidator()
 *
 * process.stdin
 * .pipe(split())
 * .pipe(validator)
 * .pipe(process.stdout)
 */

var NPIValidator = (function (_Transform) {
  _inherits(NPIValidator, _Transform);

  function NPIValidator() {
    _classCallCheck(this, NPIValidator);

    _get(Object.getPrototypeOf(NPIValidator.prototype), 'constructor', this).apply(this, arguments);
  }

  _createClass(NPIValidator, [{
    key: '_transform',

    /**
     * Transforms stream chunks.
     */
    value: function _transform(chunk, encoding, processed) {

      var string = chunk.toString();

      if (string) {

        var npi = new _NPI2['default'](string);

        this.push(npi + ' ' + npi.isValid + '\n');
      }

      processed();
    }
  }]);

  return NPIValidator;
})(Transform);

exports['default'] = NPIValidator;
module.exports = exports['default'];